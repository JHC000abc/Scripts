name: macOS Universal Build
on:
  workflow_dispatch:
  push:
    branches: [main, master]
    paths:
      - '.github/workflows/macos_universal.yml'

jobs:
  build:
    runs-on: macos-12
    timeout-minutes: 30
    strategy:
      matrix:
        arch: [x86_64, arm64]
    env:
      PYTHON_VERSION: "3.12.7"

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          brew update
          brew install openssl@3 libffi pkg-config make zlib sqlite
          echo "LDFLAGS=-L$(brew --prefix openssl@3)/lib -L$(brew --prefix libffi)/lib -L$(brew --prefix zlib)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix openssl@3)/include -I$(brew --prefix libffi)/include -I$(brew --prefix zlib)/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig:$(brew --prefix libffi)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Set up Python (${{ matrix.arch }})
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.arch }}
          cache: 'none' # 禁用缓存以强制下载

      - name: Install Python dependencies
        run: |
          # 清理环境变量
          unset PYTHONPATH
          unset PYTHONHOME

          # 根据架构运行命令
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            ARCH_RUN="arch -x86_64"
          else
            ARCH_RUN=""
          fi

          # 验证 Python 架构
          $ARCH_RUN python3 -c "import platform; print('当前Python架构:', platform.machine())"
          if [ "${{ matrix.arch }}" = "x86_64" ] && ! $ARCH_RUN python3 -c "import platform; print(platform.machine())" | grep -q "x86_64"; then
            echo "错误: Python不是x86_64架构!"
            exit 1
          elif [ "${{ matrix.arch }}" = "arm64" ] && ! $ARCH_RUN python3 -c "import platform; print(platform.machine())" | grep -q "arm64"; then
            echo "错误: Python不是arm64架构!"
            exit 1
          fi

          # 安装依赖
          $ARCH_RUN python3 -m pip install --upgrade pip
          $ARCH_RUN pip install uv --no-cache-dir
          $ARCH_RUN uv venv .venv --python=$($ARCH_RUN which python3)
          source .venv/bin/activate
          uv pip install --no-cache-dir -r requirements.txt pyinstaller

      - name: Build Executable (${{ matrix.arch }})
        run: |
          source .venv/bin/activate

          # 根据架构运行 PyInstaller
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            ARCH_RUN="arch -x86_64"
          else
            ARCH_RUN=""
          fi

          $ARCH_RUN pyinstaller -F -n start_macos_${{ matrix.arch }} \
            --paths=./sdk \
            --hidden-import='pkg_resources' \
            main.py

          # 严格检查二进制架构
          file "dist/start_macos_${{ matrix.arch }}"
          if [ "${{ matrix.arch }}" = "x86_64" ] && ! file "dist/start_macos_${{ matrix.arch }}" | grep -q "x86_64"; then
            echo "错误: 二进制不是x86_64架构!"
            exit 1
          elif [ "${{ matrix.arch }}" = "arm64" ] && ! file "dist/start_macos_${{ matrix.arch }}" | grep -q "arm64"; then
            echo "错误: 二进制不是arm64架构!"
            exit 1
          fi

      - name: Prepare Artifact
        run: |
          mkdir -p artifact_${{ matrix.arch }}
          cp dist/start_macos_${{ matrix.arch }} artifact_${{ matrix.arch }}/
          cp sdk/.env artifact_${{ matrix.arch }}/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-build
          path: artifact_${{ matrix.arch }}
          retention-days: 3

  create_universal:
    needs: build
    runs-on: macos-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: macos-*-build
          merge-multiple: false

      - name: Verify Artifacts
        run: |
          echo "Artifacts目录结构:"
          find artifacts -type f
          
          # 检查二进制文件架构
          echo "x86_64二进制架构:"
          file "artifacts/macos-x86_64-build/start_macos_x86_64"
          echo "arm64二进制架构:"
          file "artifacts/macos-arm64-build/start_macos_arm64"
          
          if [ ! -f "artifacts/macos-x86_64-build/start_macos_x86_64" ] || 
             [ ! -f "artifacts/macos-arm64-build/start_macos_arm64" ]; then
            echo "错误: 缺少必要的二进制文件!"
            exit 1
          fi

      - name: Create Universal Binary
        run: |
          mkdir -p dist

          # 合并二进制
          lipo -create \
            artifacts/macos-x86_64-build/start_macos_x86_64 \
            artifacts/macos-arm64-build/start_macos_arm64 \
            -output dist/start_macos_universal

          # 复制环境文件
          cp artifacts/macos-x86_64-build/.env dist/

          # 验证通用二进制
          echo "通用二进制架构:"
          file dist/start_macos_universal
          lipo -archs dist/start_macos_universal
          
          if ! lipo -archs dist/start_macos_universal | grep -q "x86_64" || 
             ! lipo -archs dist/start_macos_universal | grep -q "arm64"; then
            echo "错误: 通用二进制缺少架构!"
            exit 1
          fi

          # 打包
          cd dist && zip -r ../macos_universal.zip ./*

      - name: Upload Universal Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal-build
          path: macos_universal.zip

      - name: Create Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: macos_universal.zip
          tag_name: v$(date +%Y.%m.%d)
          name: Universal macOS Build ($(date +%Y-%m-%d))
          body: |
            ### 支持的架构
            - Intel (x86_64)
            - Apple Silicon (arm64)
            - Universal 2
            
            ### 构建信息
            - Python版本: ${{ env.PYTHON_VERSION }}
            - 构建日期: $(date -u)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}