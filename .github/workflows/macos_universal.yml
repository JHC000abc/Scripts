name: macOS Universal Build with pyenv
on:
  workflow_dispatch:
  push:
    branches: [main, master]
    paths:
      - '.github/workflows/macos_universal.yml'

jobs:
  build:
    runs-on: macos-13
    timeout-minutes: 30
    strategy:
      matrix:
        arch: [x86_64, arm64]
    env:
      PYTHON_VERSION: "3.12.3"

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          brew update
          brew install pyenv openssl@3 libffi pkg-config make zlib sqlite
          echo "LDFLAGS=-L$(brew --prefix openssl@3)/lib -L$(brew --prefix libffi)/lib -L$(brew --prefix zlib)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix openssl@3)/include -I$(brew --prefix libffi)/include -I$(brew --prefix zlib)/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig:$(brew --prefix libffi)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install Python (${{ matrix.arch }})
        run: |
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            export CC="clang -arch x86_64"
            export CXX="clang++ -arch x86_64"
            export ARCH_FLAGS="-arch x86_64"
          else
            export ARCH_FLAGS="-arch arm64"
          fi
          
          pyenv install ${{ env.PYTHON_VERSION }} --verbose
          pyenv global ${{ env.PYTHON_VERSION }}
          echo "PATH=$HOME/.pyenv/shims:$PATH" >> $GITHUB_ENV

      - name: Verify Python environment
        run: |
          python --version
          which python
          file $(which python)
          arch
          uname -m

      - name: Setup build environment
        run: |
          python -m pip install --upgrade pip
          pip install uv --no-cache-dir
          uv venv .venv --python=${{ env.PYTHON_VERSION }}
          source .venv/bin/activate
          uv pip install --no-cache-dir -r requirements.txt pyinstaller

      - name: Build Executable (${{ matrix.arch }})
        run: |
          source .venv/bin/activate
          pyinstaller -F -n start_macos_${{ matrix.arch }} \
            --paths=./sdk \
            --hidden-import='pkg_resources' \
            --add-data="sdk/.env:." \
            main.py
          
          # 确保文件存在
          if [ ! -f "dist/start_macos_${{ matrix.arch }}" ]; then
            echo "Error: Binary not built!"
            ls -la dist/
            exit 1
          fi
          
          file dist/start_macos_${{ matrix.arch }}
          lipo -archs dist/start_macos_${{ matrix.arch }} || true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-build
          path: |
            dist/start_macos_${{ matrix.arch }}
            sdk/.env
          retention-days: 3

  create_universal:
    needs: build
    runs-on: macos-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: macos-*-build
          merge-multiple: false  # 关键修改：禁用自动合并

      - name: Verify downloaded artifacts
        run: |
          echo "Artifacts directory contents:"
          ls -R artifacts
          
          # 检查文件是否存在
          if [ ! -f "artifacts/macos-x86_64-build/start_macos_x86_64" ] || [ ! -f "artifacts/macos-arm64-build/start_macos_arm64" ]; then
            echo "Error: Missing architecture binaries!"
            exit 1
          fi

      - name: Create Universal Binary
        run: |
          # 确保目录结构正确
          mkdir -p dist
          
          # 使用完整路径合并二进制
          lipo -create \
            "artifacts/macos-x86_64-build/start_macos_x86_64" \
            "artifacts/macos-arm64-build/start_macos_arm64" \
            -output dist/start_macos_universal
          
          # 验证合并结果
          file dist/start_macos_universal
          lipo -archs dist/start_macos_universal
          
          # 复制环境文件
          cp artifacts/macos-x86_64-build/.env dist/
          
          # 打包
          cd dist && zip -r ../macos_universal.zip ./*

      - name: Upload Universal Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal-build
          path: macos_universal.zip

      - name: Create Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: macos_universal.zip
          tag_name: v$(date +%Y.%m.%d)
          name: Universal macOS Build ($(date +%Y-%m-%d))
          body: |
            ### Supported Architectures
            - Intel (x86_64)
            - Apple Silicon (arm64)
            - Universal 2
            
            ### Build Info
            - Python: ${{ env.PYTHON_VERSION }}
            - Build Date: $(date -u)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}